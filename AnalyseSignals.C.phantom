#include "TMath.h"

Double_t fitfunction(Double_t *x, Double_t *par) {
	Float_t xx = x[0];
	Float_t binsize = 1000.0/100.0;
	//Double_t f = binsize*par[0]/sqrt(2.0*3.14159265*pow(par[2],2))*exp(-0.5*(xx-par[1])*(xx-par[1])/(par[2]*par[2]));
	Double_t f = par[3]*xx*xx+par[4]*xx+par[5]+binsize*par[0]/sqrt(2.0*3.14159265*pow(par[2],2))*exp(-0.5*(xx-par[1])*(xx-par[1])/(par[2]*par[2]));
	return f;
}


void AnalyseSignals(Int_t Analysis_Run_Number = 1) {

  //-------------------------------------------------------------------
  //Set stuff up for reading
  //-------------------------------------------------------------------
  TString filename;
  filename.Form("data/G4_test%d.root",Analysis_Run_Number);
  TFile *f1 = new TFile(filename,"READ");
  TTree *tree1 = (TTree*)f1->Get("T");

  const int MaxHits = 10000;
  Float_t Prim_E, Prim_Th, Prim_Ph;
  Int_t Prim_pdg;
  Int_t Phantom_Nhits;
  Int_t Phantom_pdg[MaxHits];
  Int_t Phantom_id[MaxHits];
  Float_t Phantom_x[MaxHits], Phantom_y[MaxHits], Phantom_z[MaxHits], Phantom_t[MaxHits];
  Float_t Phantom_Ed[MaxHits];  

  tree1->SetBranchAddress("Prim_E", &Prim_E);
  tree1->SetBranchAddress("Prim_Th", &Prim_Th);
  tree1->SetBranchAddress("Prim_Ph", &Prim_Ph);
  tree1->SetBranchAddress("Prim_pdg", &Prim_pdg);
  tree1->SetBranchAddress("Phantom_Nhits", &Phantom_Nhits);
  tree1->SetBranchAddress("Phantom_pdg", &Phantom_pdg);
  tree1->SetBranchAddress("Phantom_id", &Phantom_id);
  tree1->SetBranchAddress("Phantom_x", &Phantom_x);
  tree1->SetBranchAddress("Phantom_y", &Phantom_y);
  tree1->SetBranchAddress("Phantom_z", &Phantom_z);
  tree1->SetBranchAddress("Phantom_t", &Phantom_t);
  tree1->SetBranchAddress("Phantom_Ed", &Phantom_Ed);

  //-------------------------------------------------------------------
  //Create histograms
  //-------------------------------------------------------------------
  
  TH1F *hPrimE = new TH1F("PrimE","Primary Energy", 100, 0, 25000);
  TH1F *hPrimTh = new TH1F("PrimTh","Primary Theta", 100, 0, TMath::Pi());
  TH1F *hPrimPh = new TH1F("PrimPh","Primary Phi", 100, -TMath::Pi(), TMath::Pi());
  TH1F *hPrimPdg = new TH1F("PrimPdg","Primary PDG ID", 20, 0, 20);

  TH1F *hPhantomNhits = new TH1F("PhantomNhits","Phantom Number of Hits", 100, 0, 400);
  TH1F *hPhantomPdg = new TH1F("PhantomPdg","Phantom PDG ID", 30, 0, 30);
  TH1F *hPhantomID = new TH1F("PhantomID","Phantom ID Number", 5, 0, 5);
  
  TH1F *hPhantomX = new TH1F("PhantomX","Phantom X Position", 100, -350, 350);
  TH1F *hPhantomY = new TH1F("PhantomY","Phantom Y Position", 100, -150, 150);
  TH1F *hPhantomZ = new TH1F("PhantomZ","Phantom Z Position", 100, -150, 150);
  TH1F *hPhantomT = new TH1F("PhantomT","Phantom Time", 100, 0, 10);
  
  TH1F *hPhantomEd = new TH1F("PhantomEd","Phantom Energy Deposited", 100, 0, 100);

  TH2F *hEdep_vs_Y = new TH2F("EdepVsY", "Edep vs. Y entrant", 100, -150, 150, 100, 0, 100);

  //-------------------------------------------------------------------
  //Limits and cuts
  //-------------------------------------------------------------------

  //-------------------------------------------------------------------
  //Event loop
  //-------------------------------------------------------------------
  
  Long64_t nentries = tree1->GetEntries();
  float edep0tot = 0.0;
  float yentrant = 0.0;

  Long64_t counter = 0;
  
  for (Int_t i = 0; i < nentries; i++) {
    tree1->GetEntry(i);

    hPrimE->Fill(Prim_E);
    hPrimTh->Fill(Prim_Th);
    hPrimPh->Fill(Prim_Ph);
    hPrimPdg->Fill(Prim_pdg);

    hPhantomNhits->Fill(Phantom_Nhits);

    for (Int_t j=0; j < Phantom_Nhits ; j++) {

	counter++;
	if (Phantom_id[j] == 0) {
		if (j==0) yentrant = Phantom_y[j];
        	hPhantomPdg->Fill(Phantom_pdg[j]);
        	hPhantomID->Fill(Phantom_id[j]);

        	hPhantomX->Fill(Phantom_x[j]);
        	hPhantomY->Fill(Phantom_y[j]);
        	hPhantomZ->Fill(Phantom_z[j]);
    		hPhantomT->Fill(Phantom_t[j]);

		edep0tot += Phantom_Ed[j];
	}
    }
    //cout << "Energy deposited = " << edep0tot << endl;
    
    hPhantomEd->Fill(edep0tot);
    hEdep_vs_Y->Fill(yentrant,edep0tot);
    edep0tot=0.0;
    yentrant=0.0;
  }
  
  //-------------------------------------------------------------------
  //Plotting and writing out
  //-------------------------------------------------------------------
  
  TCanvas *c2 = new TCanvas("c2", "c2", 700,100,600,400);
  c2->Divide(2,2, 0.01, 0.01, 0);
  TCanvas *c3 = new TCanvas("c3", "c3", 1300,100,600,400);
  c3->Divide(2,2, 0.01, 0.01, 0);
  
  c2->cd(1);
  hPrimE->Draw();
  c2->cd(2);
  hPrimTh->Draw();
  c2->cd(3);
  hPrimPh->Draw();
  c2->cd(4);
  hPrimPdg->Draw();
  
  c3->cd(1);
  hPhantomNhits->Draw();
  c3->cd(2);
  hPhantomPdg->Draw();
  c3->cd(3);
  hPhantomID->Draw();
  c3->cd(4);
  hPhantomEd->Draw();

  TCanvas *c1 = new TCanvas("c1", "c1", 100,100,600,400);
  c1->Divide(2,2, 0.01, 0.01, 0);
  TCanvas *c4 = new TCanvas("c4", "c4", 100,600,600,400);
 
  c1->cd(1);
  hPhantomX->Draw();
  c1->cd(2);
  hPhantomY->Draw();
  c1->cd(3);
  hPhantomZ->Draw();
  c1->cd(4);
  hPhantomT->Draw();

  c4->cd();
  hEdep_vs_Y->Draw("COLZ");
 
}
